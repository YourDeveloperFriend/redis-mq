// Generated by CoffeeScript 1.4.0
(function() {
  var RedisSetter, assert, base_test, events, ids, new_options, options, set_keys, setter_base_test, values, vows, _;

  assert = require('assert');

  vows = require('vows');

  RedisSetter = require("../lib/redis-mq/RedisSetter").RedisSetter;

  base_test = require("./base-test");

  options = base_test.options;

  _ = require("underscore");

  events = require("events");

  setter_base_test = base_test.build_test(RedisSetter);

  vows.describe("Creating a Redis Setter").addBatch(setter_base_test).run();

  values = {
    "base:54321:KEY": "VALUE",
    "base:54321:key1": "value1",
    "base:54321:key2": "value2",
    "base:54321:key3": "value3"
  };

  ids = 2431;

  set_keys = {};

  new_options = _.extend({}, options, {
    client: {
      incr: function(key, callback) {
        return setTimeout(function() {
          return callback(null, ids++);
        }, 500);
      },
      set: function(key, value, callback) {
        return setTimeout(function() {
          set_keys[key] = value;
          return callback(null, values[key]);
        }, 500);
      }
    },
    redis_base: "base",
    delimiter: ":",
    id: "54321"
  });

  vows.describe("Redis Setter functions").addBatch({
    "Testing finishedSave": {
      topic: function() {
        var count, setter;
        setter = new RedisSetter(new_options);
        setter.keys_waiting = 2;
        count = 0;
        setter.onDone(function() {
          return count++;
        });
        setter.finishedSave();
        setter.finishedSave();
        return {
          count: count,
          keys_waiting: setter.keys_waiting
        };
      },
      "The keys waiting depleted": function(result) {
        return assert.equal(result.keys_waiting, 0);
      },
      "The callback called once": function(result) {
        return assert.equal(result.count, 1);
      }
    },
    "Testing saveKey": {
      topic: function() {
        var count, key, object_to_save, promise, setter, value;
        promise = new events.EventEmitter;
        new_options.id = 123;
        setter = new RedisSetter(new_options);
        object_to_save = {
          key1: "value1",
          key2: "value2",
          key3: "value3"
        };
        count = 0;
        setter.onDone(function(id) {
          return promise.emit('success', {
            id: id,
            count: count
          });
        });
        for (key in object_to_save) {
          value = object_to_save[key];
          setter.saveKey(key, value, function(value) {
            return count++;
          });
        }
        return promise;
      },
      "All the keys were saved": function(result) {
        var key, value, _ref, _results;
        _ref = {
          "base:123:key1": "value1",
          "base:123:key2": "value2",
          "base:123:key3": "value3"
        };
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(assert.equal(value, set_keys[key]));
        }
        return _results;
      },
      "The callbacks were all called": function(result) {
        return assert.equal(3, result.count);
      },
      "The onDone returned the right id": function(result) {
        return assert.equal(123, result.id);
      }
    }
  }).run();

}).call(this);
