// Generated by CoffeeScript 1.4.0
(function() {
  var RedisMQ, assert, events, vows;

  assert = require('assert');

  vows = require('vows');

  RedisMQ = require("../lib/redis-mq/RedisMQ").RedisMQ;

  events = require("events");

  vows.describe("Redis MQ Test").addBatch({
    "Testing Constructor": {
      topic: function() {
        var mq;
        return mq = new RedisMQ({
          client: {
            test: "b"
          },
          delimiter: "B",
          channelManager: "G"
        });
      },
      "The client was initialized": function(result) {
        return assert.equal(result.client.test, "b");
      },
      "The delimiter was initialized": function(result) {
        return assert.equal(result.delimiter, "B");
      },
      "The channel manager was initialized": function(result) {
        return assert.equal(result.channelManager, "G");
      }
    },
    "Testing Send Payload": {
      topic: function() {
        var errors, ids, mq, objects, promise, published, rpushed, successes;
        rpushed = [];
        published = [];
        promise = new events.EventEmitter;
        ids = 0;
        objects = {};
        mq = new RedisMQ({
          client: {
            rpush: function(key, id, callback) {
              rpushed.push({
                user_key: key,
                message_id: id
              });
              return setTimeout(function() {
                return callback();
              }, 100);
            },
            publish: function(channel, id, callback) {
              published.push({
                channel: channel,
                message_id: id
              });
              return setTimeout(function() {
                return callback();
              }, 100);
            },
            incr: function(key, callback) {
              var other;
              ids++;
              other = ids;
              return setTimeout(function() {
                return callback(null, other);
              }, 100);
            },
            set: function(key, value, callback) {
              objects[key] = value;
              return setTimeout(function() {
                return callback(null, value);
              }, 100);
            }
          },
          channelManager: "G",
          message_key: "mmm",
          user_key: "ddd",
          channel_key: "lll"
        });
        errors = [];
        successes = [];
        mq.sendPayload("54321", {
          test1: "a",
          test2: "b",
          test3: "c"
        }, function(err, success) {
          errors.push(err);
          return successes.push(success);
        });
        mq.sendPayload("123", {
          test1: "9",
          test2: "8",
          test3: "7"
        }, function(err, success) {
          errors.push(err);
          return successes.push(success);
        });
        mq.sendPayload("54321", {
          test1: "1",
          test2: "2",
          test3: "3"
        }, function(err, success) {
          errors.push(err);
          successes.push(success);
          return promise.emit("success", {
            rpushed: rpushed,
            published: published,
            errors: errors,
            successes: successes
          });
        });
        return promise;
      },
      "The messages were pushed onto the user": function(result) {
        var expected, key, pushed, _i, _len, _ref, _results;
        expected = [
          {
            user_key: "ddd|54321|mmm",
            message_id: 1
          }, {
            user_key: "ddd|123|mmm",
            message_id: 2
          }, {
            user_key: "ddd|54321|mmm",
            message_id: 3
          }
        ];
        _ref = result.rpushed;
        _results = [];
        for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
          pushed = _ref[key];
          assert.equal(expected[key].user_key, pushed.user_key);
          _results.push(assert.equal(expected[key].message_id, pushed.message_id));
        }
        return _results;
      },
      "The messages were published": function(result) {
        var expected, key, published, _i, _len, _ref, _results;
        expected = [
          {
            channel: "lll|54321",
            message_id: 1
          }, {
            channel: "lll|123",
            message_id: 2
          }, {
            channel: "lll|54321",
            message_id: 3
          }
        ];
        _ref = result.published;
        _results = [];
        for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
          published = _ref[key];
          assert.equal(expected[key].channel, published.channel);
          _results.push(assert.equal(expected[key].message_id, published.message_id));
        }
        return _results;
      },
      "There were no errors": function(result) {
        var err, _i, _len, _ref, _results;
        _ref = result.errors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          err = _ref[_i];
          _results.push(assert.equal(false, err));
        }
        return _results;
      },
      "There were no errors": function(result) {
        var success, _i, _len, _ref, _results;
        _ref = result.successes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          success = _ref[_i];
          _results.push(assert.equal(true, success));
        }
        return _results;
      }
    }
  }).run();

}).call(this);
