// Generated by CoffeeScript 1.4.0
(function() {
  var RedisMQ, assert, events, vows;

  assert = require('assert');

  vows = require('vows');

  RedisMQ = require("../lib/redis-mq/RedisMQ").RedisMQ;

  events = require("events");

  vows.describe("Redis MQ Test").addBatch({
    "Testing Constructor": {
      topic: function() {
        var mq;
        return mq = new RedisMQ({
          client: {
            test: "b"
          },
          delimiter: "B",
          channelManager: "G"
        });
      },
      "The client was initialized": function(result) {
        return assert.equal(result.client.test, "b");
      },
      "The delimiter was initialized": function(result) {
        return assert.equal(result.delimiter, "B");
      },
      "The channel manager was initialized": function(result) {
        return assert.equal(result.channelManager, "G");
      }
    },
    "Testing Send Payload": {
      topic: function() {
        var db, errors, ids, mq, promise, published, rpushed, successes;
        rpushed = [];
        published = [];
        promise = new events.EventEmitter;
        ids = 0;
        db = {};
        mq = new RedisMQ({
          client: {
            rpush: function(key, id, callback) {
              rpushed.push({
                user_key: key,
                message_id: id
              });
              return setTimeout(function() {
                return callback();
              }, 100);
            },
            publish: function(channel, id, callback) {
              published.push({
                channel: channel,
                message_id: id
              });
              return setTimeout(function() {
                return callback();
              }, 100);
            },
            incr: function(key, callback) {
              var other;
              ids++;
              other = ids;
              return setTimeout(function() {
                return callback(null, other);
              }, 100);
            },
            set: function(key, value, callback) {
              db[key] = value;
              return setTimeout(function() {
                return callback(null, value);
              }, 100);
            }
          },
          channelManager: "G",
          message_key: "mmm",
          user_key: "ddd",
          channel_key: "lll"
        });
        errors = [];
        successes = [];
        mq.sendPayload("54321", {
          test1: "a",
          test2: "b",
          test3: "c"
        }, function(err, success) {
          errors.push(err);
          return successes.push(success);
        });
        mq.sendPayload("123", {
          test1: "9",
          test2: "8",
          test3: "7"
        }, function(err, success) {
          errors.push(err);
          return successes.push(success);
        });
        mq.sendPayload("54321", {
          test1: "1",
          test2: "2",
          test3: "3"
        }, function(err, success) {
          errors.push(err);
          successes.push(success);
          return promise.emit("success", {
            rpushed: rpushed,
            published: published,
            errors: errors,
            successes: successes,
            db: db
          });
        });
        return promise;
      },
      "The messages were pushed onto the user": function(result) {
        var expected, key, pushed, _i, _len, _ref, _results;
        expected = [
          {
            user_key: "ddd|54321|mmm",
            message_id: 1
          }, {
            user_key: "ddd|123|mmm",
            message_id: 2
          }, {
            user_key: "ddd|54321|mmm",
            message_id: 3
          }
        ];
        _ref = result.rpushed;
        _results = [];
        for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
          pushed = _ref[key];
          assert.equal(expected[key].user_key, pushed.user_key);
          _results.push(assert.equal(expected[key].message_id, pushed.message_id));
        }
        return _results;
      },
      "The messages were published": function(result) {
        var expected, key, published, _i, _len, _ref, _results;
        expected = [
          {
            channel: "lll|54321",
            message_id: 1
          }, {
            channel: "lll|123",
            message_id: 2
          }, {
            channel: "lll|54321",
            message_id: 3
          }
        ];
        _ref = result.published;
        _results = [];
        for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
          published = _ref[key];
          assert.equal(expected[key].channel, published.channel);
          _results.push(assert.equal(expected[key].message_id, published.message_id));
        }
        return _results;
      },
      "All of the messages were set": function(result) {
        var expected, key, message_info, messageid, userid, value, _i, _len, _results;
        expected = [
          {
            userid: "54321",
            data: {
              test1: "a",
              test2: "b",
              test3: "c"
            }
          }, {
            userid: "123",
            data: {
              test1: "9",
              test2: "8",
              test3: "7"
            }
          }, {
            userid: "54321",
            data: {
              test1: "1",
              test2: "2",
              test3: "3"
            }
          }
        ];
        messageid = 0;
        _results = [];
        for (_i = 0, _len = expected.length; _i < _len; _i++) {
          message_info = expected[_i];
          messageid++;
          userid = message_info.userid;
          _results.push((function() {
            var _ref, _results1;
            _ref = message_info.data;
            _results1 = [];
            for (key in _ref) {
              value = _ref[key];
              _results1.push(assert.equal(result.db[["ddd", userid, "mmm", messageid, key].join("|")], value));
            }
            return _results1;
          })());
        }
        return _results;
      },
      "There were no errors": function(result) {
        var err, _i, _len, _ref, _results;
        _ref = result.errors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          err = _ref[_i];
          _results.push(assert.equal(false, err));
        }
        return _results;
      },
      "There were all successes": function(result) {
        var success, _i, _len, _ref, _results;
        _ref = result.successes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          success = _ref[_i];
          _results.push(assert.equal(true, success));
        }
        return _results;
      }
    },
    "Testing get message": {
      topic: function() {
        var craft_db, db, id, key, keys, messages, mq, object, promise, value;
        promise = new events.EventEmitter;
        craft_db = {
          message1: {
            toid: true,
            subject: false,
            message: true,
            message2: true,
            type: "TWO"
          },
          message2: {
            toid: true,
            subject: true,
            message: false,
            message2: false,
            type: "THREE"
          }
        };
        db = {};
        for (id in craft_db) {
          object = craft_db[id];
          for (key in object) {
            value = object[key];
            db[["messages", id, key].join("|")] = value;
          }
        }
        mq = new RedisMQ({
          client: {
            get: function(key, callback) {
              return setTimeout(function() {
                return callback(null, db[key]);
              }, 100);
            }
          },
          channelManager: "G"
        });
        keys = {
          toid: false,
          type: function(type) {
            switch (type) {
              case "TWO":
                return ["message", "message2"];
              case "THREE":
                return ["subject"];
            }
          }
        };
        messages = [];
        mq.getMessage("message1", keys, function(message) {
          messages.push(message);
          return mq.getMessage("message2", keys, function(message) {
            messages.push(message);
            return promise.emit("success", messages);
          });
        });
        return promise;
      },
      "The first message arrived": function(messages) {
        var key, message, value, _results;
        message = messages[0];
        assert.equal(Object.keys(message).length, 4);
        assert.equal("TWO", message["type"]);
        _results = [];
        for (key in message) {
          value = message[key];
          if (key !== "type") {
            _results.push(assert.equal(value, true));
          }
        }
        return _results;
      },
      "The second message arrived": function(messages) {
        var key, message, value, _results;
        message = messages[1];
        assert.equal(Object.keys(message).length, 3);
        assert.equal("THREE", message["type"]);
        _results = [];
        for (key in message) {
          value = message[key];
          if (key !== "type") {
            _results.push(assert.equal(value, true));
          }
        }
        return _results;
      }
    },
    "Testing message count": {
      topic: function() {
        var mq, result;
        mq = new RedisMQ({
          client: "B",
          channelManager: "G"
        });
        return result = {
          start0: mq.getMessagesStart(125, 30, 1),
          start1: mq.getMessagesStart(125, 15, 4),
          start2: mq.getMessagesStart(125, 30, 5),
          start3: mq.getMessagesStart(125, 30, 20),
          start4: mq.getMessagesStart(125, 130, 2)
        };
      },
      "All the starts were valid": function(result) {
        var expected, key, value, _results;
        expected = {
          start0: 0,
          start1: 45,
          start2: 120,
          start3: 120,
          start4: 0
        };
        _results = [];
        for (key in expected) {
          value = expected[key];
          _results.push(assert.equal(value, result[key]));
        }
        return _results;
      }
    },
    "Testing Get Page": {
      topic: function() {
        var db, i, mq, promise, result, _i;
        promise = new events.EventEmitter;
        result = {
          start: null,
          number: null
        };
        db = [];
        for (i = _i = 0; _i <= 130; i = ++_i) {
          db.push("message" + i);
        }
        mq = new RedisMQ({
          client: {
            on: function() {},
            llen: function(key, callback) {
              return callback(null, db.length);
            },
            lrange: function(key, start, number, callback) {
              var to_send;
              result.start = start;
              result.number = number;
              to_send = db.slice(start, start + number);
              return callback(null, to_send);
            }
          },
          channelManager: "G"
        });
        mq.getPage("54321", 3, 20, function(messages) {
          result.messages = messages;
          return promise.emit("success", result);
        });
        return promise;
      },
      "The correct start and number were calculated": function(result) {
        assert.equal(40, result.start);
        return assert.equal(20, result.number);
      },
      "The correct messages were grabbed": function(result) {
        var i, _i, _results;
        _results = [];
        for (i = _i = 40; _i <= 59; i = ++_i) {
          _results.push(assert.notEqual(-1, result.messages.indexOf("message" + i)));
        }
        return _results;
      }
    }
  }).run();

}).call(this);
