// Generated by CoffeeScript 1.4.0
(function() {
  var RedisBase, RedisSetter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RedisBase = require('./RedisBase').RedisBase;

  RedisSetter = (function(_super) {

    __extends(RedisSetter, _super);

    function RedisSetter() {
      RedisSetter.__super__.constructor.apply(this, arguments);
    }

    RedisSetter.prototype.saveObject = function(redis_object, callback) {
      var _this = this;
      if (callback) {
        this.listener = callback;
      }
      return this.client.incr('messageids', function(err, reply) {
        var key, value, _results;
        _this.id = reply;
        _results = [];
        for (key in redis_object) {
          value = redis_object[key];
          _results.push(_this.saveKey(key, value));
        }
        return _results;
      });
    };

    RedisSetter.prototype.saveKey = function(key, value, callback) {
      var _this = this;
      this.keys_waiting++;
      return this.client.set(this.buildKey(key), value, function(err, value) {
        if (callback) {
          callback(value);
        }
        return _this.finishedSave();
      });
    };

    RedisSetter.prototype.finishedSave = function() {
      this.keys_waiting--;
      if (this.isDone()) {
        if (this.listener) {
          return this.listener(this.id);
        }
      }
    };

    return RedisSetter;

  })(RedisBase);

  exports.RedisSetter = RedisSetter;

}).call(this);
