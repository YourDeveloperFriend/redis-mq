// Generated by CoffeeScript 1.4.0
(function() {
  var RedisGetter, RedisHelper, RedisMQ, RedisSetter, _;

  RedisSetter = require('./RedisSetter').RedisSetter;

  RedisGetter = require('./RedisGetter').RedisGetter;

  RedisHelper = require('./RedisBase').RedisHelper;

  _ = require("underscore");

  RedisMQ = (function() {

    function RedisMQ(options) {
      var defaults;
      defaults = {
        delimiter: '|',
        client: null,
        channelManager: null
      };
      options = _.extend({}, defaults, options);
      if (!options.client) {
        throw "RedisMQ requires a redis client (parameter: client)";
      }
      if (!options.channelManager) {
        throw "RedisMQ requires a channel manager(parameter: channelManager)";
      }
      this.client = client;
      this.channelManager = channelManager;
      this.delimiter = delimiter;
    }

    RedisMQ.prototype.sendMessage = function(fromid, toid, subject, message, callback) {
      console.log('sending message in mq');
      return this.sendPayload(toid, {
        toid: toid,
        subject: subject,
        message: message,
        fromid: fromid,
        read: false,
        type: "PersonalMessage",
        date: new Date().toISOString()
      }, callback);
    };

    RedisMQ.prototype.sendPayload = function(toid, payload, callback) {
      var redisSetter,
        _this = this;
      console.log('sending payload');
      redisSetter = new RedisSetter(this.delimiter, this.client, 'messages');
      return redisSetter.saveObject(payload, function(id) {
        console.log('payload sent ' + id);
        _this.client.rpush(RedisHelper.buildKey(['users', toid, 'messages']), id, function(err, reply) {
          console.log('pushed into queue');
          console.log(err);
          return console.log(reply);
        });
        _this.client.publish('messages|' + toid, id, function(err, reply) {
          console.log('published!');
          console.log(err);
          return console.log(reply);
        });
        return callback(false, true);
      });
    };

    RedisMQ.prototype.getMessage = function(messageid, callback) {
      var builder,
        _this = this;
      builder = new RedisGetter(this.delimiter, this.client, 'messages', messageid);
      builder.onDone(function(message) {
        return callback(message);
      });
      builder.loadKey('toid');
      builder.loadKey('subject');
      builder.loadKey('message');
      builder.loadKey('unread');
      return builder.loadKey('type', function(type) {
        switch (type) {
          case "PersonalMessage":
            return builder.loadKey('fromid');
        }
      });
    };

    RedisMQ.prototype.listen = function(userid) {
      return this.channelManager.listen(userid);
    };

    RedisMQ.prototype.getNextMessage = function(userid, uniq, callback) {
      console.log("getting next message");
      return this.channelManager.getNextMessage(userid, uniq, callback);
    };

    RedisMQ.prototype.getMessagesStart = function(messages_count, messages_per_page, page) {
      var start;
      start = messages_count;
      while (messages_count - messages_per_page > 0 && page > 0) {
        start -= messages_per_page;
        page--;
      }
      return start;
    };

    RedisMQ.prototype.getPage = function(userid, page, messages_per_page, callback) {
      var user_messages_key,
        _this = this;
      user_messages_key = RedisHelper.buildKey(['users', userid, 'messages']);
      console.log("finding " + user_messages_key);
      return this.client.llen(user_messages_key, function(err, messages_count) {
        var messages_start;
        console.log("Counted");
        console.log(err);
        console.log(messages_count);
        messages_count = parseInt(messages_count);
        messages_start = getMessagesStart(messages_count, messages_per_page, page);
        return _this.client.lrange(user_messages_key, messages_start, messages_per_page, function(err, messages) {
          console.log("found messages");
          console.log(err);
          console.log(messages);
          return callback(messages);
        });
      });
    };

    return RedisMQ;

  })();

  exports.RedisMQ = RedisMQ;

}).call(this);
