// Generated by CoffeeScript 1.4.0
(function() {
  var RedisGetter, RedisHelper, RedisMQ, RedisSetter, _;

  RedisSetter = require('./RedisSetter').RedisSetter;

  RedisGetter = require('./RedisGetter').RedisGetter;

  RedisHelper = require('./RedisBase').RedisHelper;

  _ = require("underscore");

  RedisMQ = (function() {

    function RedisMQ(options) {
      var defaults, key, value;
      defaults = {
        delimiter: '|',
        client: null,
        channelManager: null,
        user_key: 'users',
        message_key: 'messages',
        channel_key: 'messages'
      };
      options = _.extend({}, defaults, options);
      for (key in options) {
        value = options[key];
        if (value) {
          this[key] = value;
        } else {
          throw "Expected " + key + " for redis mq";
        }
      }
    }

    RedisMQ.prototype.sendPayload = function(toid, payload, callback) {
      var messages_key, redisSetter,
        _this = this;
      messages_key = this.buildMessagesKey(toid);
      redisSetter = new RedisSetter({
        delimiter: this.delimiter,
        client: this.client,
        redis_base: messages_key
      });
      return redisSetter.saveObject(payload, function(id) {
        _this.client.lpush(messages_key, id, function(err, reply) {});
        _this.client.publish(_this.channel_key + '|' + toid, id, function(err, reply) {});
        _this.client.sadd(messages_key, id, function(err, reply) {});
        return callback(false, true);
      });
    };

    RedisMQ.prototype.getMessage = function(userid, messageid, keys, callback) {
      var builder, key, value, _results,
        _this = this;
      builder = new RedisGetter({
        delimiter: this.delimiter,
        client: this.client,
        redis_base: this.buildMessagesKey(userid),
        id: messageid
      });
      builder.onDone(function(message) {
        return callback(message);
      });
      _results = [];
      for (key in keys) {
        value = keys[key];
        if (value) {
          _results.push(builder.loadKey(key, function(response) {
            var otherkey, otherkeys, _i, _len, _results1;
            otherkeys = value(response);
            if (otherkeys) {
              _results1 = [];
              for (_i = 0, _len = otherkeys.length; _i < _len; _i++) {
                otherkey = otherkeys[_i];
                _results1.push(builder.loadKey(otherkey));
              }
              return _results1;
            }
          }));
        } else {
          _results.push(builder.loadKey(key));
        }
      }
      return _results;
    };

    RedisMQ.prototype.buildMessagesKey = function(userid) {
      return RedisHelper.buildKey(this.delimiter, [this.user_key, userid, this.message_key]);
    };

    RedisMQ.prototype.buildUnreadKey = function(userid) {
      return RedisHelper.buildKey(this.delimiter, [this.user_key, userid, this.message_key, 'unread']);
    };

    RedisMQ.prototype.getNextMessage = function(userid, uniq, callback) {
      return this.channelManager.getNextMessage(userid, uniq, callback);
    };

    RedisMQ.prototype.getMessagesStart = function(messages_count, messages_per_page, page) {
      var start;
      return start = Math.min((page - 1) * messages_per_page, messages_count - (messages_count % messages_per_page));
    };

    RedisMQ.prototype.getPage = function(userid, page, messages_per_page, callback) {
      var user_messages_key,
        _this = this;
      user_messages_key = this.buildMessagesKey(userid);
      return this.client.llen(user_messages_key, function(err, messages_count) {
        var messages_start;
        messages_count = parseInt(messages_count);
        messages_start = _this.getMessagesStart(messages_count, messages_per_page, page);
        return _this.client.lrange(user_messages_key, messages_start, messages_per_page, function(err, messages) {
          return callback(messages);
        });
      });
    };

    RedisMQ.prototype.getUnread = function(userid, callback) {
      var _this = this;
      return this.client.smembers(this.buildUnreadKey(userid), function(err, messages) {
        return callback(err ? [] : messages);
      });
    };

    RedisMQ.prototype.setRead = function(userid, messageid, callback) {
      var _this = this;
      return this.client.srem(this.buildUnreadKey(userid), messageid, function(err, removed) {
        return callback(err ? false : removed > 0);
      });
    };

    return RedisMQ;

  })();

  exports.RedisMQ = RedisMQ;

}).call(this);
